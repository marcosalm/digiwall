{
  "name": "estira",
  "version": "0.3.1",
  "description": "Expose Livescript's class system to JavaScript",
  "main": "index.js",
  "scripts": {
    "test": "make test",
    "prepublish": "make"
  },
  "keywords": [
    "class"
  ],
  "author": {
    "name": "Matt Brennan",
    "email": "mwrbrennan@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "LiveScript": "~1.2.0",
    "tape": "~2.4.0",
    "faucet": "0.0.0",
    "browserify": "~3.24.8",
    "testling": "~1.5.9",
    "uglify-js": "~2.4.12"
  },
  "testling": {
    "files": "test.js",
    "browsers": {
      "ie": [
        6,
        7,
        8,
        9
      ],
      "firefox": [
        13
      ],
      "chrome": [
        20
      ],
      "safari": [
        5.1
      ],
      "opera": [
        12
      ]
    }
  },
  "readme": "[Livescript](http://livescript.com) has a pretty sweet class system. Shame we can't use it in JS-land.\n\n**OR CAN WE.**\n\nEstira [![](https://travis-ci.org/quarterto/Estira.png)](https://travis-ci.org/quarterto/Estira)\n======\n\n```javascript\nconst Base = require('estira');\n\nvar Foo = Base.extend({\n  initialize: function(bar) {\n    this.bar = bar;\n  },\n  frob: function(baz) {\n    return this.bar + baz;\n  }\n});\n\nvar foo = new Foo(\"hello \");\nfoo.frob(\"world\"); //â‡’ \"hello world\"\n```\n\nAPI\n---\n\n### `Base = require('estira')`\n\nBase class with the bare minimal needed for inheritance. Extend it, it doesn't do much on its own.\n\n### `Subclass = Superclass.extend(methods)`\n\nReturns a prototypal subclass of `Superclass`, inheriting `Superclass`'s instance and class properties, extended with the object passed in. If `methods` contains a method called `initialize`, it is used as `Subclass`'s constructor. If `initialize` is omitted, it delegates to the parent class' constructor.\n\n### `Class.meta(methods)`\n\nExtends the \"metaclass\" of `Class`. Lets you add static methods, which may be inherited.\n\n### `fn.super$`\n\nRefers to the parent class implementation of the function. Lets you call super methods like\n\n```javascript\nvar Superclass = Base.extend({\n  quux: function() {\n    return \"hello\";\n  }\n});\nvar Subclass = Superclass.extend(\n  quux: function quux() {\n    return quux.super$() + \" world\";\n  }\n);\n```\n\nExtending third-party classes\n-----------------------------\nIf you want to extend a class that doesn't derive from `Base` (e.g. `EventEmitter`), you can shoehorn estira onto it using `Sub = Base.extend.call(EventEmitter, methods)`. Classes created this way *can* be further extended, and `super$` calls still work.\n\n\nLicence\n-------\n[MIT](/licence.md). &copy; 2014 Matt Brennan.\n",
  "readmeFilename": "readme.md",
  "_id": "estira@0.3.1",
  "dist": {
    "shasum": "3a07b5bed59e4368c496835475a4e7da3d9a0531"
  },
  "_from": "estira@~0.3.0",
  "_resolved": "https://registry.npmjs.org/estira/-/estira-0.3.1.tgz"
}
